// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Alert struct {
	Metadata *AlertMetadata `json:"metadata"`
	Payload  []AlertPayload `json:"payload"`
}

type AlertMetadata struct {
	ID     string    `json:"id"`
	Sender string    `json:"sender"`
	SentAt time.Time `json:"sentAt"`
	Status Status    `json:"status"`
	Type   Type      `json:"type"`
	Scope  Scope     `json:"scope"`
}

type AlertPayload struct {
	Headline     string    `json:"headline"`
	Message      string    `json:"message"`
	Instructions *string   `json:"instructions"`
	Contact      *string   `json:"contact"`
	URL          *string   `json:"url"`
	Area         []Area    `json:"area"`
	Expires      time.Time `json:"expires"`
	Category     string    `json:"category"`
	Response     string    `json:"response"`
	Urgency      string    `json:"urgency"`
	Severity     string    `json:"severity"`
	Certainty    string    `json:"certainty"`
}

type Area struct {
	Polygons    []Polygon `json:"polygons"`
	Geocode     []Geocode `json:"geocode"`
	Description string    `json:"description"`
}

type Geocode struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type LineSegment struct {
	P1 *Location `json:"p1"`
	P2 *Location `json:"p2"`
}

type Location struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type LocationInput struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type Polygon struct {
	Segments []LineSegment `json:"segments"`
}

type Scope string

const (
	ScopePublic Scope = "Public"
)

var AllScope = []Scope{
	ScopePublic,
}

func (e Scope) IsValid() bool {
	switch e {
	case ScopePublic:
		return true
	}
	return false
}

func (e Scope) String() string {
	return string(e)
}

func (e *Scope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Scope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Scope", str)
	}
	return nil
}

func (e Scope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusActual Status = "Actual"
)

var AllStatus = []Status{
	StatusActual,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActual:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Type string

const (
	TypeCancel Type = "Cancel"
	TypeAlert  Type = "Alert"
	TypeUpdate Type = "Update"
)

var AllType = []Type{
	TypeCancel,
	TypeAlert,
	TypeUpdate,
}

func (e Type) IsValid() bool {
	switch e {
	case TypeCancel, TypeAlert, TypeUpdate:
		return true
	}
	return false
}

func (e Type) String() string {
	return string(e)
}

func (e *Type) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Type(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

func (e Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
